/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aplibrarysystem;

import java.io.*;
import java.util.Date;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import java.time.temporal.ChronoUnit;
import java.util.Scanner;
/**
 *
 * @author K15H3N
 */
public class APLS_borrowing extends javax.swing.JPanel {

    int borrow_id;
    int borrower_id;
    String borrower_name;
    String borrower_role;
    Date borrow_date;
    Date borrow_duedate;
    Date borrow_returndate;
    
    public APLS_borrowing() {
        initComponents();
        APLS_initializeBorrowing();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        borrowing = new javax.swing.JPanel();
        addBorrowing = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        borrowingList = new javax.swing.JTable();
        borrowing_idLBL = new javax.swing.JLabel();
        borrowing_idTXT = new javax.swing.JTextField();
        borrower_idTXT = new javax.swing.JTextField();
        borrower_idLBL = new javax.swing.JLabel();
        book_idLBL = new javax.swing.JLabel();
        book_idTXT = new javax.swing.JTextField();
        borrow_dateTXT = new javax.swing.JTextField();
        borrow_dateLBL = new javax.swing.JLabel();
        borrow_duedateLBL = new javax.swing.JLabel();
        borrow_duedateTXT = new javax.swing.JTextField();
        borrowing_fineTXT = new javax.swing.JTextField();
        borrowing_fineLBL = new javax.swing.JLabel();
        borrow_returndateTXT = new javax.swing.JTextField();
        borrow_returndateLBL = new javax.swing.JLabel();
        returnBorrowing = new javax.swing.JButton();
        borrowingLBL = new javax.swing.JLabel();
        borrowerLBL = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        borrowerList = new javax.swing.JTable();
        bookLBL = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        bookList = new javax.swing.JTable();
        renewBorrowing = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(900, 600));

        borrowing.setBackground(new java.awt.Color(225, 226, 188));
        borrowing.setForeground(new java.awt.Color(226, 38, 88));
        borrowing.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 18)); // NOI18N

        addBorrowing.setBackground(new java.awt.Color(226, 38, 88));
        addBorrowing.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        addBorrowing.setForeground(new java.awt.Color(255, 255, 255));
        addBorrowing.setText("Add New Borrowing");
        addBorrowing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBorrowingActionPerformed(evt);
            }
        });

        borrowingList.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        borrowingList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Borrower_ID", "Book_ID", "Borrow_Date", "Due Date", "Return Date", "Renewals"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        borrowingList.getTableHeader().setReorderingAllowed(false);
        borrowingList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                borrowingListMouseClicked(evt);
            }
        });
        borrowingList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                borrowingListKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(borrowingList);
        if (borrowingList.getColumnModel().getColumnCount() > 0) {
            borrowingList.getColumnModel().getColumn(0).setMaxWidth(25);
            borrowingList.getColumnModel().getColumn(1).setMinWidth(75);
            borrowingList.getColumnModel().getColumn(2).setMaxWidth(60);
        }

        borrowing_idLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        borrowing_idLBL.setForeground(new java.awt.Color(226, 38, 88));
        borrowing_idLBL.setText("Borrowing ID");

        borrowing_idTXT.setEditable(false);
        borrowing_idTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        borrower_idTXT.setEditable(false);
        borrower_idTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        borrower_idLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        borrower_idLBL.setForeground(new java.awt.Color(226, 38, 88));
        borrower_idLBL.setText("Borrower ID");

        book_idLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        book_idLBL.setForeground(new java.awt.Color(226, 38, 88));
        book_idLBL.setText("Book ID");

        book_idTXT.setEditable(false);
        book_idTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        borrow_dateTXT.setEditable(false);
        borrow_dateTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        borrow_dateLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        borrow_dateLBL.setForeground(new java.awt.Color(226, 38, 88));
        borrow_dateLBL.setText("Borrow Date");

        borrow_duedateLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        borrow_duedateLBL.setForeground(new java.awt.Color(226, 38, 88));
        borrow_duedateLBL.setText("Borrow Due Date");

        borrow_duedateTXT.setEditable(false);
        borrow_duedateTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        borrowing_fineTXT.setEditable(false);
        borrowing_fineTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        borrowing_fineLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        borrowing_fineLBL.setForeground(new java.awt.Color(226, 38, 88));
        borrowing_fineLBL.setText("Borrowing Fine");

        borrow_returndateTXT.setEditable(false);
        borrow_returndateTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        borrow_returndateLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        borrow_returndateLBL.setForeground(new java.awt.Color(226, 38, 88));
        borrow_returndateLBL.setText("Borrow Return Date");

        returnBorrowing.setBackground(new java.awt.Color(226, 38, 88));
        returnBorrowing.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        returnBorrowing.setForeground(new java.awt.Color(255, 255, 255));
        returnBorrowing.setText("Return Borrowing");
        returnBorrowing.setEnabled(false);
        returnBorrowing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBorrowingActionPerformed(evt);
            }
        });

        borrowingLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        borrowingLBL.setForeground(new java.awt.Color(226, 38, 88));
        borrowingLBL.setText("Borrowing");

        borrowerLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        borrowerLBL.setForeground(new java.awt.Color(226, 38, 88));
        borrowerLBL.setText("Students & Staff");

        borrowerList.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        borrowerList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Borrower_ID", "Borrower_Name", "Borrower_Role"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        borrowerList.getTableHeader().setReorderingAllowed(false);
        borrowerList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                borrowerListMouseClicked(evt);
            }
        });
        borrowerList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                borrowerListKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(borrowerList);

        bookLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        bookLBL.setForeground(new java.awt.Color(226, 38, 88));
        bookLBL.setText("Books");

        bookList.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        bookList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book_ID", "Book_Name", "Book_Genre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookList.getTableHeader().setReorderingAllowed(false);
        bookList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookListMouseClicked(evt);
            }
        });
        bookList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                bookListKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(bookList);
        if (bookList.getColumnModel().getColumnCount() > 0) {
            bookList.getColumnModel().getColumn(0).setMaxWidth(100);
        }

        renewBorrowing.setBackground(new java.awt.Color(226, 38, 88));
        renewBorrowing.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        renewBorrowing.setForeground(new java.awt.Color(255, 255, 255));
        renewBorrowing.setText("Renew Borrowing");
        renewBorrowing.setEnabled(false);
        renewBorrowing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewBorrowingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout borrowingLayout = new javax.swing.GroupLayout(borrowing);
        borrowing.setLayout(borrowingLayout);
        borrowingLayout.setHorizontalGroup(
            borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(borrowingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(borrowingLayout.createSequentialGroup()
                        .addGroup(borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(borrowing_idTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(borrowing_idLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(borrow_dateTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(borrow_dateLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(borrow_duedateTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(borrow_duedateLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(borrowingLayout.createSequentialGroup()
                        .addGroup(borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(borrower_idLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(borrower_idTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(book_idTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(book_idLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(borrow_returndateTXT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(borrow_returndateLBL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(borrowing_fineTXT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(borrowing_fineLBL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(66, 66, 66)
                .addGroup(borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addBorrowing, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                    .addComponent(returnBorrowing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(renewBorrowing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(borrowingLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(borrowingLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(borrowingLayout.createSequentialGroup()
                        .addComponent(borrowerLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(borrowingLayout.createSequentialGroup()
                        .addComponent(bookLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(236, 236, 236))
                    .addGroup(borrowingLayout.createSequentialGroup()
                        .addGroup(borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        borrowingLayout.setVerticalGroup(
            borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, borrowingLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(borrowingLayout.createSequentialGroup()
                        .addComponent(addBorrowing)
                        .addGap(33, 33, 33)
                        .addComponent(renewBorrowing))
                    .addGroup(borrowingLayout.createSequentialGroup()
                        .addGroup(borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(borrowingLayout.createSequentialGroup()
                                .addGroup(borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(borrow_dateLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(borrowing_idLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(borrow_dateTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(borrowing_idTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(borrowingLayout.createSequentialGroup()
                                .addComponent(borrow_duedateLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(borrow_duedateTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(borrowingLayout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(returnBorrowing))
                            .addGroup(borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, borrowingLayout.createSequentialGroup()
                                    .addGroup(borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(borrow_returndateLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(borrowing_fineLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(borrow_returndateTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(borrowing_fineTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, borrowingLayout.createSequentialGroup()
                                    .addComponent(borrower_idLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(32, 32, 32))
                                .addComponent(borrower_idTXT, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(borrowingLayout.createSequentialGroup()
                                .addComponent(book_idLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(book_idTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGroup(borrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(borrowingLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(borrowerLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bookLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(borrowingLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(borrowingLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 3, Short.MAX_VALUE)
                    .addComponent(borrowing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 3, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 605, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(borrowing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void returnBorrowingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBorrowingActionPerformed
        APLS_returnBorrowing();
    }//GEN-LAST:event_returnBorrowingActionPerformed

    private void borrowingListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_borrowingListKeyReleased
        APLS_borrowingInfo();
    }//GEN-LAST:event_borrowingListKeyReleased

    private void borrowingListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_borrowingListMouseClicked
        APLS_borrowingInfo();
    }//GEN-LAST:event_borrowingListMouseClicked

        
    public Boolean addBorrowingMode = true; //Boolean check if ready to add new borrowing entry
    String nextBorrowingID;
            
    private void addBorrowingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBorrowingActionPerformed
        if (addBorrowingMode == false){
            addBorrowingMode = true;
            addBorrowing.setText("Add New Borrowing");
            
            //Clear Selections
            borrowingList.clearSelection();
            borrowerList.clearSelection();
            bookList.clearSelection();
            
            APLS_initializeBorrowing();
        } 
        else if ((borrower_idTXT.getText().equals("") == true) || (book_idTXT.getText().equals("") == true)) {
            JOptionPane.showMessageDialog(null, "Please ensure borrower and book have been selected from the tables", "Incomplete Borrowing Entry", JOptionPane.WARNING_MESSAGE); //pronpt user to select items
        }     
        else {
            try{
            //Open the file
            String filename = "src/apls_DBTXT/borrowing_t.txt";
            FileWriter fw = new FileWriter(filename, true); //append
            PrintWriter outputFile = new PrintWriter(fw);
            
            //Write Data
            outputFile.print(nextBorrowingID + 
                         ":" + borrower_idTXT.getText() +
                         ":" + book_idTXT.getText() +
                         ":" + borrow_dateTXT.getText() +
                         ":" + borrow_duedateTXT.getText()+
                         "::0" //for : return date : extension (begins at 0)
                        + "\r\n");
            
            outputFile.close();
            
            APLS_initializeBorrowing();
            } catch (IOException ex){}
        }
                
    }//GEN-LAST:event_addBorrowingActionPerformed
    
    private void borrowerListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_borrowerListMouseClicked
        clickFiller(borrowerList, borrower_idTXT);
    }//GEN-LAST:event_borrowerListMouseClicked

    private void borrowerListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_borrowerListKeyReleased
        clickFiller(borrowerList, borrower_idTXT);
    }//GEN-LAST:event_borrowerListKeyReleased

    private void bookListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookListMouseClicked
        clickFiller(bookList, book_idTXT);
    }//GEN-LAST:event_bookListMouseClicked

    private void bookListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bookListKeyReleased
        clickFiller(bookList, book_idTXT);
    }//GEN-LAST:event_bookListKeyReleased

    private void renewBorrowingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renewBorrowingActionPerformed
        APLS_renewBorrowing();
    }//GEN-LAST:event_renewBorrowingActionPerformed

    SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy"); //format date
                
    public void APLS_borrowingInfo(){
        try{
            DefaultTableModel model = (DefaultTableModel)borrowingList.getModel(); //model from JTable
            int rowIndex = borrowingList.getSelectedRow();
            
            //Save to variables
            int borrowing_id = Integer.parseInt(model.getValueAt(rowIndex, 0).toString());
            int borrower_id = Integer.parseInt(model.getValueAt(rowIndex, 1).toString());
            int book_id = Integer.parseInt(model.getValueAt(rowIndex, 2).toString());
            Date borrow_date = formatter.parse(model.getValueAt(rowIndex, 3).toString());
            Date borrow_duedate = formatter.parse(model.getValueAt(rowIndex, 4).toString());
            Date borrow_returndate = null;
            if (model.getValueAt(rowIndex, 5) != ""){ //prevent error for books that have not been returned
                borrow_returndate = formatter.parse(model.getValueAt(rowIndex, 5).toString());
            }

            //Save to variables
            borrowing_idTXT.setText(String.valueOf(borrowing_id));
            borrower_idTXT.setText(String.valueOf(borrower_id));
            book_idTXT.setText(String.valueOf(book_id));
            borrow_dateTXT.setText(formatter.format(borrow_date));
            borrow_duedateTXT.setText(formatter.format(borrow_duedate));
            borrow_returndateTXT.setText("");
            if (borrow_returndate != null){ //prevent error if no return date
                borrow_returndateTXT.setText(formatter.format(borrow_returndate));
                renewBorrowing.setEnabled(false);
                returnBorrowing.setEnabled(false);
                borrowing_fineTXT.setText("");
            } else {
                returnBorrowing.setEnabled(true);
                
                //Calculate Fine
                SimpleDateFormat local = new SimpleDateFormat("yyyy-MM-dd");
                LocalDate today = LocalDate.now(); //today's date
                LocalDate duedate = LocalDate.parse(local.format(borrow_duedate));
                long fine = ChronoUnit.DAYS.between(duedate, today); //RM1 fine per day
                int renewals = Integer.parseInt(model.getValueAt(borrowingList.getSelectedRow(), 6).toString());
                borrowing_fineTXT.setText("");
                if (fine > 0){ //overdue
                    borrowing_fineTXT.setText("RM " + fine + ".00");
                    renewBorrowing.setEnabled(false); //cannot renew
                } 
                else if (renewals >= 3) { //not renewed for more than 3 times
                    renewBorrowing.setEnabled(false); //cannot renew
                }
                else {
                    renewBorrowing.setEnabled(true); //can renew only if not overdue and not done 3 times before
                }
            }
            
            rowHighlighter(borrowerList, borrower_id); //borrower Table
            rowHighlighter(bookList, book_id); //book Table
            
            addBorrowing.setText("Create New Borrowing");
            addBorrowingMode = false;
        } catch (ParseException ex) {}
    }
    
    public void APLS_initializeBorrowing(){
        //BORROWING_T
        File borrowing = new File("src/apls_DBTXT/borrowing_t.txt");
        
        try{         
        FileReader fr = new FileReader(borrowing);
        BufferedReader br = new BufferedReader(fr);
            
        DefaultTableModel model = (DefaultTableModel)borrowingList.getModel();
        model.setRowCount(0); //clear table
        Object[] lines = br.lines().toArray();
        
        //Sort Table unreturned books at the top
        for(int i = 0; i < lines.length; i++){
            String[] row = lines[i].toString().split(":");
            if (row[5].toString().equals("") == true){ //empty indicates books have not been returned
                model.addRow(row); //load data
            }
        }
        //Sort table returned books below
        for(int i = 0; i < lines.length; i++){
            String[] row = lines[i].toString().split(":");
            if (row[5].toString().equals("") == false){ //not empty indicates books have been returned
                model.addRow(row); //load data
            }
        }
        
        //Generate Borrowing ID for next entry
        int newBorrowingID = 0;
        for(int i = 0; i < lines.length; i++){
            String[] row = lines[i].toString().split(":");
            if (Integer.parseInt(row[0]) > newBorrowingID){ //if row's id is greater than previous row,
                newBorrowingID = Integer.parseInt(row[0]);  //update variable to reflect largest value
            }
        }
        
        nextBorrowingID = String.valueOf(newBorrowingID + 1);//+1 for next entry
        borrowing_idTXT.setText(nextBorrowingID); //load next borrowing ID
        //Clear textboxes
        borrower_idTXT.setText("");
        book_idTXT.setText("");
        borrow_returndateTXT.setText("");
        borrowing_fineTXT.setText("");
        
        Date date = new Date();
        borrow_dateTXT.setText(formatter.format(date));

        LocalDate duedate = LocalDate.now().plusDays(14); //borrowing duration: 14 days
        borrow_duedateTXT.setText(duedate.format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));
        
        //BORROWER_T
        File borrower = new File("src/apls_DBTXT/borrower_t.txt");
        
        fr = new FileReader(borrower);
        br = new BufferedReader(fr);
            
        model = (DefaultTableModel)borrowerList.getModel();
        model.setRowCount(0); //clear table
        lines = br.lines().toArray();
        
        //List Students & Staff
        for(int i = 0; i < lines.length; i++){
            String[] row = lines[i].toString().split(":");
            model.addRow(row); //load data
        }
        
        //BOOK_T
        File book = new File("src/apls_DBTXT/book_t.txt");
                
        fr = new FileReader(book);
        br = new BufferedReader(fr);
            
        model = (DefaultTableModel)bookList.getModel();
        model.setRowCount(0); //clear table
        lines = br.lines().toArray();
        
        //List Books
        for(int i = 0; i < lines.length; i++){
            String[] row = lines[i].toString().split(":");
            model.addRow(row); //load data
        }
        
        } catch(FileNotFoundException ex){}
        renewBorrowing.setEnabled(false);
        returnBorrowing.setEnabled(false);
    }
        
    public void rowHighlighter(javax.swing.JTable table, int id){
        try{ //Highlight
            int rowNum = -1;
            Object valueRow;
            do{
                rowNum++; //increment to 0
                valueRow = table.getModel().getValueAt(rowNum, 0); //get the id at stated row
            }while(Integer.parseInt(valueRow.toString()) != id && rowNum < table.getRowCount()); //check if id matches and ensure checking does not exceed number of rows
                table.setRowSelectionInterval(rowNum, rowNum); //highlight the row in table
        } catch (ArrayIndexOutOfBoundsException ex) {
            //to account for the possibility of a deleted record, clear selection if nothing found (the while loop exceeds)
            table.clearSelection(); //clear selection if no longer exists
        }
    }

    private void clickFiller(javax.swing.JTable table, javax.swing.JTextField txt){
        if (addBorrowingMode == true){ //if add borrowing mode is activated
            DefaultTableModel model = (DefaultTableModel)table.getModel(); //model from JTable
            int rowIndex = table.getSelectedRow();

            String selectedID = model.getValueAt(rowIndex, 0).toString(); //get id from selected row
            txt.setText(selectedID); //add to textbox
        }
    }
    
    private void APLS_renewBorrowing(){
        if (JOptionPane.showConfirmDialog(null, "Are you sure you would like to extend the borrower's borrowing duration to 2 weeks from today's date?", 
                                      "Extend Borrowing Duration", 
                                      JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
            DefaultTableModel model = (DefaultTableModel)borrowingList.getModel(); //model from JTable
            LocalDate duedate = LocalDate.now().plusDays(14); //extend 14 days from today
            
            //Set Due Date
            borrow_duedateTXT.setText(duedate.format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));
            model.setValueAt(borrow_duedateTXT.getText(), borrowingList.getSelectedRow(), 4);
            
            //Update Renewal count
            int renewalCount = Integer.parseInt(model.getValueAt(borrowingList.getSelectedRow(), 6).toString()) + 1; //add 1
            model.setValueAt(renewalCount, borrowingList.getSelectedRow(), 6);
            
            updateDBTXT();
        } else {}
    }
    
    private void APLS_returnBorrowing(){
            if (JOptionPane.showConfirmDialog(null, "By clicking 'yes', I as the librarian-in-charge acknowledge that the borrower has returned the book and paid the late fees where applicable", 
                                      "Return Book?", 
                                      JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
            DefaultTableModel model = (DefaultTableModel)borrowingList.getModel(); //model from JTable
            LocalDate returndate = LocalDate.now();
            
            //Set Return Date
            borrow_returndateTXT.setText(returndate.format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));
            model.setValueAt(borrow_returndateTXT.getText(), borrowingList.getSelectedRow(), 5);
            
            updateDBTXT();
        } else {}
    }
    
    private void updateDBTXT(){
        //update from JTable to textfile
            try {
                File borrowingTXTF = new File("src/apls_DBTXT/borrowing_t.txt");
                FileWriter fw = new FileWriter(borrowingTXTF);
                BufferedWriter bw = new BufferedWriter(fw);

                for(int i = 0; i < borrowingList.getRowCount(); i++){ //rows in borrowing List table
                    for(int j = 0; j < borrowingList.getColumnCount(); j++){//columns in borrowing list table
                        bw.write(borrowingList.getValueAt(i, j).toString()+":"); //use delimiter ":" to seperate
                    }
                    bw.newLine();
                }

                bw.close();
                fw.close();
            
            } catch (IOException ex) {}
            APLS_initializeBorrowing();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBorrowing;
    private javax.swing.JLabel bookLBL;
    javax.swing.JTable bookList;
    private javax.swing.JLabel book_idLBL;
    protected javax.swing.JTextField book_idTXT;
    private javax.swing.JLabel borrow_dateLBL;
    protected javax.swing.JTextField borrow_dateTXT;
    private javax.swing.JLabel borrow_duedateLBL;
    protected javax.swing.JTextField borrow_duedateTXT;
    private javax.swing.JLabel borrow_returndateLBL;
    protected javax.swing.JTextField borrow_returndateTXT;
    private javax.swing.JLabel borrowerLBL;
    javax.swing.JTable borrowerList;
    private javax.swing.JLabel borrower_idLBL;
    protected javax.swing.JTextField borrower_idTXT;
    private javax.swing.JPanel borrowing;
    private javax.swing.JLabel borrowingLBL;
    javax.swing.JTable borrowingList;
    private javax.swing.JLabel borrowing_fineLBL;
    protected javax.swing.JTextField borrowing_fineTXT;
    private javax.swing.JLabel borrowing_idLBL;
    protected javax.swing.JTextField borrowing_idTXT;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton renewBorrowing;
    private javax.swing.JButton returnBorrowing;
    // End of variables declaration//GEN-END:variables
}

/* REFERENCES

C#, JAVA,PHP, Programming ,Source Code, 2015. JAVA - How To Get Selected Row Values From JTable Into JTextfields In Java. [Online] 
Available at: https://1bestcsharp.blogspot.com/2015/02/java-how-to-get-selected-row-values.html
[Accessed 27 February 2021].

C#, JAVA,PHP, Programming ,Source Code, 2017. How To Get And Set Jtable Data To Txt File Using Java NetBeans. [Online] 
Available at: https://1bestcsharp.blogspot.com/2017/10/java-import-and-export-text-file-to-jtable.html
[Accessed 28 February 2021].

HowToDoInJava, n.a.. LocalDate format() API. [Online] 
Available at: https://howtodoinjava.com/java/date-time/localdate-format-example/
[Accessed 7 March 2021].

JavaTpoint, n.a.. Get Current Date and Time in Java. [Online] 
Available at: https://www.javatpoint.com/java-get-current-date
[Accessed 6 March 2021].

RoseIndia.Net, n.a.. Getting Cell Values in a JTable. [Online] 
Available at: https://www.roseindia.net/java/example/java/swing/GetCellValues.shtml
[Accessed 5 March 2021].

Singh, C., n.a.. Java – Add days to Date. [Online] 
Available at: https://beginnersbook.com/2017/10/java-add-days-to-date/
[Accessed 6 March 2021].

Singh, C., n.a.. Java 8 – Calculate days between two dates. [Online] 
Available at: https://beginnersbook.com/2017/10/java-8-calculate-days-between-two-dates/#:~:text=In%20this%20tutorial%20we%20will%20see%20how%20to,can%20use%20the%20DAYS.between%20()%20method%20of%20java.time.temporal.ChronoUnit.
[Accessed 7 March 2021].

Stack Overflow, 2010. How to parse a date? [duplicate]. [Online] 
Available at: https://stackoverflow.com/questions/999172/how-to-parse-a-date
[Accessed 29 February 2021].

Stack Overflow, 2011. how to clear JTable. [Online] 
Available at: https://stackoverflow.com/questions/4577792/how-to-clear-jtable
[Accessed 2 March 2021].

Stack Overflow, 2012. Programmatically select a row in JTable. [Online] 
Available at: https://stackoverflow.com/questions/8661251/programmatically-select-a-row-in-jtable
[Accessed 3 March 2021].

Stack Overflow, 2014. How to set the value of specific cell in JTable?. [Online] 
Available at: https://stackoverflow.com/questions/21158083/how-to-set-the-value-of-specific-cell-in-jtable
[Accessed 3 March 2021].

*/